// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	installation "github.com/kyma-incubator/hydroform/install/installation"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-project/control-plane/components/provisioner/internal/model"

	rest "k8s.io/client-go/rest"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckInstallationState provides a mock function with given fields: runtimeID, kubeconfig
func (_m *Service) CheckInstallationState(runtimeID string, kubeconfig *rest.Config) (installation.InstallationState, error) {
	ret := _m.Called(runtimeID, kubeconfig)

	var r0 installation.InstallationState
	if rf, ok := ret.Get(0).(func(string, *rest.Config) installation.InstallationState); ok {
		r0 = rf(runtimeID, kubeconfig)
	} else {
		r0 = ret.Get(0).(installation.InstallationState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *rest.Config) error); ok {
		r1 = rf(runtimeID, kubeconfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformCleanup provides a mock function with given fields: kubeconfig
func (_m *Service) PerformCleanup(kubeconfig *rest.Config) error {
	ret := _m.Called(kubeconfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rest.Config) error); ok {
		r0 = rf(kubeconfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerInstallation provides a mock function with given fields: runtimeID, kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig
func (_m *Service) TriggerInstallation(runtimeID string, kubeconfigRaw string, kymaProfile *model.KymaProfile, release model.Release, globalConfig model.Configuration, componentsConfig []model.KymaComponentConfig) error {
	ret := _m.Called(runtimeID, kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *model.KymaProfile, model.Release, model.Configuration, []model.KymaComponentConfig) error); ok {
		r0 = rf(runtimeID, kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerUninstall provides a mock function with given fields: kubeconfig
func (_m *Service) TriggerUninstall(kubeconfig *rest.Config) error {
	ret := _m.Called(kubeconfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rest.Config) error); ok {
		r0 = rf(kubeconfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerUpgrade provides a mock function with given fields: kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig
func (_m *Service) TriggerUpgrade(kubeconfigRaw *rest.Config, kymaProfile *model.KymaProfile, release model.Release, globalConfig model.Configuration, componentsConfig []model.KymaComponentConfig) error {
	ret := _m.Called(kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rest.Config, *model.KymaProfile, model.Release, model.Configuration, []model.KymaComponentConfig) error); ok {
		r0 = rf(kubeconfigRaw, kymaProfile, release, globalConfig, componentsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
